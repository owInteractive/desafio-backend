<?php


namespace App\Repositories;


use App\Exceptions\EmailAlreadyRegisteredException;
use App\Exceptions\GenericModelNotFoundException;
use App\Repositories\AbstractRepository;
use App\User;
use Illuminate\Support\Facades\Cache;

class UserRepository extends AbstractRepository
{
    public function __construct($model = null)
    {
        if($model == null) $model = app(User::class);

        parent::__construct($model);
    }

    public function create($data)
    {
        if(isset($data['password'])){
            $data['password'] = bcrypt($data['password']);
        }

        if($this->model->where('email',$data['email'])->exists()){
            throw new EmailAlreadyRegisteredException();
        }

        Cache::tags('user')->flush();

        return parent::create($data);
    }

    public function getByEmail($email){

        $user = $this->model->where('email',$email)->first();

        if(!isset($user)){
            $className = class_basename($this->model);
            throw new GenericModelNotFoundException($email,$className);
        }
        return $user;
    }

    public function getResult()
    {
        $this->model = $this->model->orderBy('created_at');

        return self::getResult();
    }

    public function paginated($png = 10,$page = 0)
    {
        $key = 'users_'.$page.'_'.$png;
        $expiration = 60 * 24;

        return Cache::tags('user')->remember($key,$expiration,function () use ($png){

        $this->model = $this->model->orderBy('created_at');

        return parent::paginated($png);

        });
    }

    public function update($data, $id)
    {
        Cache::tags('user')->flush();

        return parent::update($data, $id); // TODO: Change the autogenerated stub
    }

    public function destroy($id)
    {
        Cache::tags('user')->flush();

        return parent::destroy($id);
    }


}
